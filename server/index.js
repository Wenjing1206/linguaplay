import express from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import { createClient } from 'redis';
import { createServer } from 'http';
import { Server } from 'socket.io';
import path from 'path';
import { fileURLToPath } from 'url';

import authRoute from './routes/auth.js';
import socketHandler from './sockets/index.js';
import scoreRoutes from './routes/score.js';


// ‰∏≠Èó¥‰ª∂
app.use(cors({ origin: 'http://localhost:5173', credentials: true }));
app.use(express.json());
app.use(cookieParser());

// Ë∑ØÁî±
app.use('/api/score', scoreRoutes);

// Êï∞ÊçÆÂ∫ìËøûÊé•
mongoose.connect('mongodb://localhost:27017/linguaplay')
  .then(() => {
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
  })
  .catch(err => console.error(err));


// ‚úÖ Ëß£Êûê __dirnameÔºàÂÖºÂÆπ ES ModuleÔºâ
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ‚úÖ Âä†ËΩΩ .env ÈÖçÁΩÆ
dotenv.config({ path: path.resolve(__dirname, './.env') });

// ‚úÖ Ê£ÄÊü• JWT_SECRET ÊòØÂê¶Âä†ËΩΩ
if (!process.env.JWT_SECRET) {
  console.warn('‚ùå JWT_SECRET is not set in .env file!');
} else {
  console.log('üîê JWT_SECRET loaded');
}

const app = express();
const PORT = process.env.PORT || 3000;

// ‚úÖ ‰∏≠Èó¥‰ª∂
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:5174'],
  credentials: true
}));
app.use(express.json());
app.use(cookieParser());

// ‚úÖ Ë∑ØÁî±
app.use('/api/auth', authRoute);
app.get('/api/hello', (req, res) => {
  res.send('Hello World');
});

// ‚úÖ MongoDB ËøûÊé•
if (process.env.MONGO_URI) {
  mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  })
    .then(() => console.log('‚úÖ MongoDB connected'))
    .catch(err => {
      console.error('‚ùå MongoDB error:', err.message);
      process.exit(1);
    });
} else {
  console.warn('‚ö†Ô∏è MONGO_URI not set, skipping MongoDB connection');
}

// ‚úÖ Redis ËøûÊé•ÔºàÂèØÈÄâÔºâ
if (process.env.REDIS_URL) {
  const redis = createClient({ url: process.env.REDIS_URL });
  redis.connect()
    .then(() => console.log('‚úÖ Redis connected'))
    .catch(err => console.error('‚ùå Redis error:', err.message));
} else {
  console.warn('‚ö†Ô∏è REDIS_URL not set, skipping Redis connection');
}

// ‚úÖ ÂàõÂª∫ HTTP Server Âíå Socket.io
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: ['http://localhost:5173', 'http://localhost:5174'],
    methods: ['GET', 'POST'],
    credentials: true
  }
});

// ‚úÖ ÂàùÂßãÂåñ socket ‰∫ã‰ª∂
socketHandler(io);

// ‚úÖ ÂêØÂä®ÊúçÂä°
httpServer.listen(PORT, () => {
  console.log(`‚úÖ Server running at http://localhost:${PORT}`);
}).on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.error(`‚ùå Port ${PORT} is already in use.`);
    process.exit(1);
  } else {
    throw err;
  }
});
